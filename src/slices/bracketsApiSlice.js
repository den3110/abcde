// slices/bracketsApiSlice.js
import { apiSlice } from "./apiSlice";

export const bracketsApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    // l·∫•y 1 bracket ƒë·ªÉ bi·∫øt n√≥ l√† group hay po
    getOnlyBracket: builder.query({
      query: (bid) => `/brackets/${bid}`,
      providesTags: (res, err, bid) => [
        { type: "Bracket", id: bid },
        { type: "SlotPlan", id: bid },
        { type: "PoPlan", id: bid },
      ],
    }),

    // ƒë·ªçc tr·∫°ng th√°i draw hi·ªán t·∫°i (ƒë·ªÉ l·∫•y reveals n·∫øu BE c√≥ tr·∫£)
    getDrawStatus: builder.query({
      query: (bid) => `/draw/brackets/${bid}/draw/status`,
      providesTags: (res, err, bid) => [{ type: "Draw", id: bid }],
    }),

    // ========== GROUP ==========
    bulkAssignSlotPlan: builder.mutation({
      query: ({ bid, body }) => ({
        url: `/admin/brackets/${bid}/slot-plan/bulk-assign`,
        method: "POST",
        body,
      }),
      invalidatesTags: (res, err, { bid }) => [
        { type: "SlotPlan", id: bid },
        { type: "Bracket", id: bid },
      ],
    }),

    startGroupDraw: builder.mutation({
      query: ({ bid, body }) => ({
        url: `/draw/${bid}/start`,
        method: "POST",
        body: { mode: "group", ...body },
      }),
      invalidatesTags: (res, err, { bid }) => [{ type: "Draw", id: bid }],
    }),

    // ========== PO / KNOCKOUT ==========
    // c∆° c·∫•u PO theo BRACKET (chu·∫©n √Ω b·∫°n: c∆° c·∫•u 1 l·∫ßn, m·ªçi phi√™n draw ƒë·ªÅu ƒÉn)
    bulkAssignPoPlan: builder.mutation({
      query: ({ bid, body }) => ({
        url: `/admin/brackets/${bid}/po-plan/bulk-assign`,
        method: "POST",
        body,
      }),
      invalidatesTags: (res, err, { bid }) => [
        { type: "PoPlan", id: bid },
        { type: "Bracket", id: bid },
        { type: "Draw", id: bid },
      ],
    }),

    // start PO cho bracket n√†y
    startPoDraw: builder.mutation({
      query: ({ bid, body }) => ({
        url: `/draw/${bid}/start`,
        method: "POST",
        body: { mode: "po", ...body },
      }),
      invalidatesTags: (res, err, { bid }) => [{ type: "Draw", id: bid }],
    }),

    // optional
    generateGroupMatches: builder.mutation({
      query: ({ bid, body }) => ({
        url: `/draw/brackets/${bid}/groups/generate-matches`,
        method: "POST",
        body,
      }),
    }),
  }),
});

export const {
  useGetOnlyBracketQuery,
  useGetDrawStatusQuery,
  useBulkAssignSlotPlanMutation,
  useBulkAssignPoPlanMutation, // üëà FE c∆° c·∫•u PO g·ªçi c√°i n√†y
  useStartGroupDrawMutation,
  useStartPoDrawMutation,
  useGenerateGroupMatchesMutation,
} = bracketsApiSlice;
